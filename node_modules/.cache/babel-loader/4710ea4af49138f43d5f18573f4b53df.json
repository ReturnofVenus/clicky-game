{"ast":null,"code":"import _classCallCheck from \"/Users/arianaromero/sites/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/arianaromero/sites/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/arianaromero/sites/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/arianaromero/sites/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/arianaromero/sites/clicky-game/clicky-game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/arianaromero/sites/clicky-game/clicky-game/src/App.js\";\nimport React, { Component } from \"react\";\nimport paintings from \"./cards.json\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport Card from \"./components/Card\"; // shuffle upon each click\n\nfunction shuffle(array) {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var _ref = [array[j], array[i]];\n    array[i] = _ref[0];\n    array[j] = _ref[1];\n  }\n\n  return array;\n}\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      paintings: paintings,\n      score: 0,\n      topScore: 0,\n      showAlert: 0,\n      showSuccess: 0,\n      clickedpaintings: []\n    };\n\n    _this.clickedImage = function (id) {\n      // assign the state of the empty array to a let to be updated\n      var clickedpaintings = _this.state.clickedpaintings;\n      var score = _this.state.score;\n      var topScore = _this.state.topScore;\n\n      _this.setState({\n        showAlert: 0\n      }); // if the clicked image has an id of the indexed paintings\n\n\n      if (clickedpaintings.indexOf(id) === -1) {\n        // push that id into that id into the array to be stored\n        clickedpaintings.push(id);\n        console.log(clickedpaintings); // run the score function\n\n        _this.handleIncrement(); // run the reshuffle function after each click\n\n\n        _this.makeShuffle();\n      } else if (_this.state.score === 12) {\n        // alert player wins\n        _this.setState({\n          showSuccess: 1,\n          score: 0,\n          clickedpaintings: []\n        });\n      } else {\n        // alert player loss\n        _this.setState({\n          score: 0,\n          clickedpaintings: []\n        });\n\n        console.log(\"duplicate\");\n\n        _this.setState({\n          showAlert: 1\n        });\n      }\n\n      if (score > topScore) {\n        _this.setState({\n          topScore: score\n        });\n      }\n    };\n\n    _this.handleIncrement = function () {\n      // setState updates a components states\n      _this.setState({\n        score: _this.state.score + 1\n      });\n    };\n\n    _this.makeShuffle = function () {\n      _this.setState({\n        paintings: shuffle(paintings)\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"alert alert-danger\",\n        style: {\n          opacity: this.state.showAlert\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"You clicked on this already, try again...\"), React.createElement(\"div\", {\n        className: \"alert alert-success\",\n        style: {\n          opacity: this.state.showSuccess\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, \"Brilliant, you haven't clicked on duplicates!\"), React.createElement(Scoreboard, {\n        title: \"Clicky Game\",\n        score: this.state.score,\n        topScore: this.state.topScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, this.state.paintings.map(function (painting) {\n        return React.createElement(Card, {\n          id: painting.id,\n          image: painting.image,\n          clickedImage: _this2.clickedImage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/arianaromero/sites/clicky-game/clicky-game/src/App.js"],"names":["React","Component","paintings","Scoreboard","Card","shuffle","array","i","length","j","Math","floor","random","App","state","score","topScore","showAlert","showSuccess","clickedpaintings","clickedImage","id","setState","indexOf","push","console","log","handleIncrement","makeShuffle","opacity","map","painting","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport paintings from \"./cards.json\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport Card from \"./components/Card\";\n\n// shuffle upon each click\nfunction shuffle(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n}\n\nclass App extends Component {\n  state = {\n    paintings,\n    score: 0,\n    topScore: 0,\n    showAlert: 0,\n    showSuccess: 0,\n    clickedpaintings: []\n  };\n\n  clickedImage = id => {\n    // assign the state of the empty array to a let to be updated\n    let clickedpaintings = this.state.clickedpaintings;\n    let score = this.state.score;\n    let topScore = this.state.topScore;\n    this.setState({\n      showAlert: 0\n    });\n\n    // if the clicked image has an id of the indexed paintings\n    if (clickedpaintings.indexOf(id) === -1) {\n      // push that id into that id into the array to be stored\n      clickedpaintings.push(id);\n      console.log(clickedpaintings);\n      // run the score function\n      this.handleIncrement();\n      // run the reshuffle function after each click\n      this.makeShuffle();\n    } else if (this.state.score === 12) {\n      // alert player wins\n      this.setState({\n        showSuccess: 1,\n        score: 0,\n        clickedpaintings: []\n      });\n    } else {\n       // alert player loss\n      this.setState({\n        score: 0,\n        clickedpaintings: []\n      });\n      console.log(\"duplicate\");\n      this.setState({\n        showAlert: 1\n      });\n    }\n\n    if (score > topScore) {\n      this.setState({\n        topScore: score\n      });\n    }\n  };\n\n  // handleIncrement increases this.state.score by 1\n  handleIncrement = () => {\n    // setState updates a components states\n    this.setState({ score: this.state.score + 1 });\n  };\n\n  // shuffle up images\n  makeShuffle = () => {\n    this.setState({ paintings: shuffle(paintings) });\n  };\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div\n          className=\"alert alert-danger\"\n          style={{ opacity: this.state.showAlert }}\n        >\n          You clicked on this already, try again...\n          </div>\n        <div\n          className=\"alert alert-success\"\n          style={{ opacity: this.state.showSuccess }}\n        >\n          Brilliant, you haven't clicked on duplicates!\n          </div>\n        <Scoreboard\n          title=\"Clicky Game\"\n          score={this.state.score}\n          topScore={this.state.topScore}\n        />\n        <div className=\"row\">\n          {this.state.paintings.map(painting => (\n            <Card\n              id={painting.id}\n              image={painting.image}\n              clickedImage={this.clickedImage}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}